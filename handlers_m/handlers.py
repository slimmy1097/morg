
from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, State, StatesGroup

from db.db_work import get_all_chats, get_words_list, update_words_list, delete_words_list

from config import settings, logger


router = Router()


ALLOWED_USERS = settings.ALLOWED_USERS


async def is_allowed_user(user_id: int) -> bool:
    return user_id in ALLOWED_USERS


class Processes(StatesGroup):
    waiting_for_words = State()
    waiting_for_delete_words = State()


@router.message(Command('menu'))
async def cmd_menu(message: Message):
    user_id = message.from_user.id
    if not await is_allowed_user(user_id):
        logger.info(
            f'–≤—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id=}\n —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: {ALLOWED_USERS=}')
        await message.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!')
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–∞—Ç—ã',
                                  callback_data='view_chats')],
            [InlineKeyboardButton(text='üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É',
                                  callback_data='send_newsletter')],
            [InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞',
                                  callback_data='add_words')],
            [InlineKeyboardButton(text='‚ûñ –£–±—Ä–∞—Ç—å —Å–ª–æ–≤–∞ –∏–∑ –ø–æ–∏—Å–∫–∞',
                                  callback_data='delete_words')],
            [InlineKeyboardButton(text='üò≥ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞',
                                  callback_data='show_words')],
        ]
    )

    await message.answer('üç©üç©üç©', reply_markup=keyboard)


@router.callback_query()
async def process_callback(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'view_chats':
        response_from_db_get_all_chats = await get_all_chats()
        logger.info(
            f'–≤—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –º–µ–Ω—é view_chats, –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ –æ —á–∞—Ç–∞—Ö')
        logger.info(f'{response_from_db_get_all_chats=}')
        await callback.message.answer(f'üìã –í–æ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤...\n {response_from_db_get_all_chats}')

    elif callback.data == 'send_newsletter':
        await callback.message.answer('üì¢ –ó–∞–ø—É—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞...')

    elif callback.data == 'show_words':
        words = await get_words_list()
        await callback.message.answer(f'üì¢ –°–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —á–∞—Ç–∞–º\n {words}')

    elif callback.data == 'add_words':
        await callback.message.answer('‚ûï –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ ", "')
        await state.set_state(Processes.waiting_for_words)
        # await state.clear()

    elif callback.data == 'delete_words':
        await callback.message.answer('‚ûï –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ ", "\n –æ—Ç–º–µ–Ω–∞ /cancel')
        await state.set_state(Processes.waiting_for_delete_words)

    await callback.answer()


@router.message(Processes.waiting_for_words, F.text)
async def process_added_words(message: Message, state: FSMContext):
    await update_words_list(message.text)
    await message.answer(f'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–æ–≤–∞')
    await state.clear()


@router.message(Processes.waiting_for_delete_words, Command('cancel'))
async def cancel_handler(message: Message, state: FSMContext):
    await message.answer('–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞')
    await state.clear()


@router.message(Processes.waiting_for_delete_words, F.text)
async def process_added_words(message: Message, state: FSMContext):
    await delete_words_list(message.text)
    await message.answer(f'‚úÖ –£–¥–∞–ª–µ–Ω—ã —Å–ª–æ–≤–∞')
    await state.clear()


@router.message(StateFilter(default_state), F.text)
async def process_added_words(message: Message, state: FSMContext):
    await delete_words_list(message.text)
    await message.answer(f'–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –º–µ–Ω—é: /menu')
    await state.clear()
